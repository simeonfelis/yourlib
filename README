This is so alpha. Don't use it. Although it might work for you.

Purpose
=======

I want to listen to *my* music, that means to the files I posess. I have
a slow server (arm, atom) so I don't want to live recode stuff. I don't want
to use flash, html5 should be fine. And I want a user interface that does not
suck.

So I build a little webinterface to my music folder, that just plays directly
my files via the browserÂ´s <audio> tag. A decent browser will play oggs and mp3s
(like chrome). Furthermore, multiple user have their own music folder.

Features
========

 * Support for ogg and mp3 as source files
 * Password protected music files

Requires
========

chrome or firefox or any other that can play your music files natively.
iPhone did work, too.


Dependencies
============

You may want to user pip to install dependencies rather than apt-get.
yum should also be fine. pacman, too.

 * python2
 * django 1.4
 * mutagen
 * nginx

You can use apache instead of nginx if you know how to configure it. I don't.

What you should know (setup)
============================

 * Your music folder must have the filesystem structure
   /path/to/music/username1/orig/....
   /path/to/music/username2/orig/....

 * the file yourlib/settings.py will look at your hostname and includes the
   corresponding yourlib/settings_hostname.py. Change it accordingly. Also
   change the secret key. Generate a secret key with, eg. ''pwgen -sy 50''

 * There is a example nginx config: yourlib/nginx.conf

 * You should not put your music in the media folder of the django project or app

 * Start and stop the wsgi server with start.sh: ''./start.sh start''

 * a full clean restart of the server can be done like this (YOU MUST BE IN YOUR
   DJANGO PROJECT FOLDER!):
''# find . -name "*.pyc" -exec rm -v {} \; ; sudo -u http ./start.sh stop ; ./manage.py collectstatic ; systemctl restart nginx.service ; echo 1 > /proc/sys/vm/drop_caches ; sudo -u http ./start.sh start''


Wishlist
========
 * Automatic conversion to mp3 and ogg to serve all files to major browsers equally
 * Server side playlist stream for puplic access
 * Playlist sharing within users, later server instances
 * Mobile device support (UI)
